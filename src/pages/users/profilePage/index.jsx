import { memo, useState, useEffect, useRef } from "react";
import { useNavigate } from "react-router-dom";
import "./style.scss";
import FeedBackUser from "./feedBackUser/feedBackUser";
import userService from "../../../services/userService";

import { logout, getUserInfo } from "../../../utils/auth";
import { toast } from "react-toastify";

const ProfilePage = () => {
  const [user, setUser] = useState(() => getUserInfo());
  const fileInputRef = useRef(null); // üëà th√™m ref ƒë·ªÉ trigger upload ·∫£nh

  const [formData, setFormData] = useState({
    Id: "",
    FullName: "",
    Age: "",
    Height: "",
    Weight: "",
    AvatarUrl: "", // File
    PhoneNumber: "",
  });


import { getUserInfo } from "../../../utils/auth";
import { useNavigate } from "react-router-dom";

const ProfilePage = () => {
  const [user, setUser] = useState(() => getUserInfo());
const navigate = useNavigate();

  useEffect(() => {
    if (user?.id) {
      userService
        .getUserById(user.id)
        .then((response) => {
          const data = response.resultObj;
          setUser(data);
          setFormData({
            Id: data.id,
            FullName: data.fullName || "",
            Age: data.age || "",
            Height: data.height || "",
            Weight: data.weight || "",
            AvatarUrl: "", // Kh√¥ng c·∫ßn g√°n avatarUrl string
            PhoneNumber: data.phoneNumber || "",
          });
        })
        .catch((err) => {
          console.error("L·ªói l·∫•y th√¥ng tin user:", err);
        });
    }
  }, [user?.id]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleImageChange = (e) => {
    try {
      const file = e.target.files[0];
      if (file) {
        setFormData((prev) => ({
          ...prev,
          AvatarUrl: file,
        }));

        // Hi·ªÉn th·ªã preview ngay
        const previewURL = URL.createObjectURL(file);
        setUser((prev) => ({
          ...prev,
          avatarUrl: previewURL,
        }));
      }
      toast.success("C·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán th√†nh c√¥ng!");
    } catch (error) {
      console.error("L·ªói khi ch·ªçn ·∫£nh:", error);
      toast.error("C√≥ l·ªói x·∫£y ra khi ch·ªçn ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i!");
    }
  };

  const handleSave = async () => {
    try {
      await userService.updateUserOwnerProfile(formData);
      toast.success("C·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng!");
    } catch (error) {
      console.error("L·ªói c·∫≠p nh·∫≠t h·ªì s∆°:", error);
      toast.error("C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!");
    }
  };
  const navigate = useNavigate();
  const handleLogout = () => {
    logout();
    navigate("/login", { replace: true });
  };
  return (
    <div className="profile-container">
      <aside className="sidebar">
        <div className="avatar-section">
          <img
            src={user?.avatarUrl || user?.avatar}
            alt="Avatar"
            className="avatar"
          />
          <div className="Edit-avatar">
            <button
              className="edit-button"
              onClick={() => fileInputRef.current?.click()}
            >
              S·ª≠a
            </button>
            <input
              type="file"
              ref={fileInputRef}
              style={{ display: "none" }}
              accept="image/*"
              onChange={handleImageChange}
            />
          </div>
          <div className="name">{user?.fullName}</div>
          <div className="stats">
            <div>
              <strong>{user?.age}</strong> Tu·ªïi
            </div>
          </div>
        </div>

        <nav className="menu">
          <ul>
            <li onClick={() => navigate("/court-booking-history")}>L·ªãch s·ª≠ ƒë·∫∑t S√¢n</li>
            <li onClick={() => navigate("/coach-booking-history")}>L·ªãch s·ª≠ ƒë·∫∑t HLV</li>
            <li>L·ªãch s·ª≠ tr·∫≠n ƒë·∫•u</li>
            <li>Ph√≤ng ƒë√£ t·∫°o</li>
            <li>S·ªë d∆∞</li>
            <li>ƒê√°nh gi√° ng∆∞·ªùi ch∆°i</li>
            <li>C√†i ƒë·∫∑t</li>
            <li
              onClick={handleLogout}
              style={{ cursor: "pointer" }}
              title="Logout"
            >
              ƒêƒÉng xu·∫•t
            </li>
          </ul>
        </nav>
      </aside>

      <main className="profile-form">
        <section className="form-section">
          <h3>H·ªí S∆† C·ª¶A T√îI</h3>
          <div className="form-group">
            <input
              name="FullName"
              value={formData.FullName}
              onChange={handleChange}
              placeholder="T√™n*"
            />
            <input
              name="PhoneNumber"
              value={formData.PhoneNumber}
              onChange={handleChange}
              placeholder="S·ªë ƒëi·ªán tho·∫°i"
            />
          </div>
          <div className="buttons">
            <button className="save" onClick={handleSave}>
              L∆∞u
            </button>
            <button className="cancel">H·ªßy</button>
          </div>
        </section>

        <section className="form-section">
          <h3>S·ªê ƒêO</h3>
          <div className="form-group">
            <input
              name="Height"
              value={formData.Height}
              onChange={handleChange}
              placeholder="Chi·ªÅu Cao"
            />
            <input
              name="Weight"
              value={formData.Weight}
              onChange={handleChange}
              placeholder="C√¢n N·∫∑ng"
            />
          </div>
          <div className="buttons">
            <button className="save" onClick={handleSave}>
              L∆∞u
            </button>
            <button className="cancel">H·ªßy</button>
          </div>
        </section>
        <FeedBackUser revieweeId={user?.id} />
      </main>
    </div>
  );
};

export default memo(ProfilePage);
